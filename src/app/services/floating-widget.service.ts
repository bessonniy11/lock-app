import { Injectable } from '@angular/core';
import { Utils } from '@nativescript/core';
import { BehaviorSubject } from 'rxjs';

declare const android: any;
declare const com: any;
declare const java: any;

@Injectable({
  providedIn: 'root'
})
export class FloatingWidgetService {
  private floatingViews: any[] = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤
  private windowManager: any = null;
  private params: any = null;
  private initialX: number = 0;
  private initialY: number = 0;
  private initialTouchX: number = 0;
  private initialTouchY: number = 0;
  private isLocked: boolean = false; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
  private inactivityTimer: any = null; // –¢–∞–π–º–µ—Ä –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
  private lastTouchTime: number = 0; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞—Å–∞–Ω–∏—è
  private overlayView: any = null; // –ù–∞–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω–∞
  private currentWidgetX: number = 0; // –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞ X
  private currentWidgetY: number = 0; // –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞ Y
  private widgetSize: number = 100; // –†–∞–∑–º–µ—Ä –≤–∏–¥–∂–µ—Ç–∞
  private deleteArea: any = null; // –û–±–ª–∞—Å—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞
  public hasWidget$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false); // –ò—Å–ø–æ–ª—å–∑—É–µ–º BehaviorSubject

  constructor() { }

  public async showFloatingWidget(): Promise<boolean> {
    console.log("Checking permission...");
    if (!this.checkDrawOverlayPermission()) {
      console.log("No permission, requesting...");
      this.requestDrawOverlayPermission();
      return false;
    }

    console.log("Permission granted, creating widget...");
    try {
      const widget = this.createFloatingWidget();
      this.floatingViews.push(widget); // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –≤ –º–∞—Å—Å–∏–≤
      console.log("Widget created successfully");
      this.hasWidget$.next(true); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      return true;
    } catch (error) {
      console.error("Error creating widget:", error);
      return false;
    }
  }

  public hideFloatingWidget(): void {
    this.removeLastFloatingWidget(); // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–¥–∂–µ—Ç
  }

  private checkDrawOverlayPermission(): boolean {
    try {
      if (android.os.Build.VERSION.SDK_INT >= 23) {
        const hasPermission = android.provider.Settings.canDrawOverlays(Utils.android.getApplicationContext());
        console.log("Permission check result:", hasPermission);
        return hasPermission;
      }
      return true;
    } catch (error) {
      console.error("Error checking permission:", error);
      return false;
    }
  }

  private requestDrawOverlayPermission(): void {
    try {
      if (android.os.Build.VERSION.SDK_INT >= 23) {
        console.log("Requesting overlay permission...");
        const intent = new android.content.Intent(
          android.provider.Settings.ACTION_MANAGE_OVERLAY_PERMISSION,
          android.net.Uri.parse("package:" + Utils.android.getApplicationContext().getPackageName())
        );
        intent.addFlags(android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
        Utils.android.getApplicationContext().startActivity(intent);
        console.log("Permission request sent");
      }
    } catch (error) {
      console.error("Error requesting permission:", error);
    }
  }

  private toggleLock(): void {
    this.isLocked = !this.isLocked;
    const lastWidget = this.floatingViews[this.floatingViews.length - 1]; // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–¥–∂–µ—Ç
    if (lastWidget) {
        lastWidget.setText(this.isLocked ? "üîí" : "üîì"); // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞

        if (this.isLocked) {
            // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤–∏–¥–∂–µ—Ç–∞
            const currentX = this.params.x;
            const currentY = this.params.y;

            // 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–ª–æ–∂–µ–Ω–∏–µ
            this.showSimpleOverlay();

            // 3. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–∏–¥–∂–µ—Ç
            try {
                this.windowManager.removeView(lastWidget);
                this.floatingViews.pop(); // –£–¥–∞–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞
            } catch (e) {
                console.error('Error removing floating widget', e);
            }

            // 4. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å —Ç–æ–π –∂–µ –ø–æ–∑–∏—Ü–∏–µ–π
            this.createWidget(currentX, currentY);
        } else {
            this.hideOverlay(); // –°–∫—Ä—ã–≤–∞–µ–º –Ω–∞–ª–æ–∂–µ–Ω–∏–µ
        }
    }
  }

  private showSimpleOverlay(): void {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    this.hideOverlay();
    
    try {
      const context = Utils.android.getApplicationContext();
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω
      this.overlayView = new android.view.View(context);
      this.overlayView.setBackgroundColor(android.graphics.Color.argb(150, 0, 0, 0));
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
      const displayMetrics = context.getResources().getDisplayMetrics();
      const screenWidth = displayMetrics.widthPixels;
      const screenHeight = displayMetrics.heightPixels;
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è
      const params = new android.view.WindowManager.LayoutParams(
        screenWidth,
        screenHeight,
        android.os.Build.VERSION.SDK_INT >= 26 
          ? android.view.WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY 
          : android.view.WindowManager.LayoutParams.TYPE_PHONE,
        android.view.WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
        android.graphics.PixelFormat.TRANSLUCENT
      );
      
      params.gravity = android.view.Gravity.TOP | android.view.Gravity.LEFT;
      params.x = 0;
      params.y = 0;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –≤ WindowManager
      this.windowManager.addView(this.overlayView, params);
    } catch (error) {
      console.error("Error creating overlay:", error);
    }
  }

  private createWidget(x: number, y: number): any {
    try {
      const context = Utils.android.getApplicationContext();
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É —ç–∫—Ä–∞–Ω–∞
      const displayMetrics = context.getResources().getDisplayMetrics();
      const screenHeight = displayMetrics.heightPixels;

      // –°–æ–∑–¥–∞–µ–º TextView –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
      const floatingView = new android.widget.TextView(context);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Å—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è isLocked
      floatingView.setText(this.isLocked ? "üîí" : "üîì"); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–º–æ—á–∫–∞
      floatingView.setTextSize(25);
      floatingView.setTextColor(android.graphics.Color.BLACK); // –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
      floatingView.setGravity(android.view.Gravity.CENTER); // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç

      // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—ã–π —Ñ–æ–Ω
      const shape = new android.graphics.drawable.GradientDrawable();
      shape.setShape(android.graphics.drawable.GradientDrawable.OVAL);
      shape.setColor(android.graphics.Color.WHITE); // –ë–µ–ª—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
      shape.setStroke(2, android.graphics.Color.GRAY); // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–≤–æ–¥–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

      floatingView.setBackground(shape);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º padding
      const padding = 15; // –£–º–µ–Ω—å—à–∞–µ–º padding
      floatingView.setPadding(padding, padding, padding, padding);

      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫–Ω–∞ - –¥–µ–ª–∞–µ–º –≤–∏–¥–∂–µ—Ç –º–µ–Ω—å—à–∏–º
      const size = this.widgetSize; // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –ø–∏–∫—Å–µ–ª—è—Ö
      
      this.params = new android.view.WindowManager.LayoutParams(
        size,
        size,
        android.os.Build.VERSION.SDK_INT >= 26 
          ? android.view.WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY 
          : android.view.WindowManager.LayoutParams.TYPE_PHONE,
        android.view.WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
        android.graphics.PixelFormat.TRANSLUCENT
      );

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–∏–¥–∂–µ—Ç–∞
      this.params.x = x;
      this.params.y = y;
      this.currentWidgetX = x;
      this.currentWidgetY = y;

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
      floatingView.setOnTouchListener(new android.view.View.OnTouchListener({
        onTouch: (view, event) => {
          const action = event.getAction();
          switch (action) {
            case android.view.MotionEvent.ACTION_DOWN:
              this.initialX = this.params.x;
              this.initialY = this.params.y;
              this.initialTouchX = event.getRawX();
              this.initialTouchY = event.getRawY();
              this.resetInactivityTimer(); // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
              return true;

            case android.view.MotionEvent.ACTION_MOVE:
              this.params.x = this.initialX + (event.getRawX() - this.initialTouchX);
              this.params.y = this.initialY + (event.getRawY() - this.initialTouchY);
              try {
                this.windowManager.updateViewLayout(floatingView, this.params);
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤–∏–¥–∂–µ—Ç–∞
                this.currentWidgetX = this.params.x;
                this.currentWidgetY = this.params.y;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤–∏–¥–∂–µ—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è (80% –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞) –∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                const widgetHeightThreshold = screenHeight * 0.3; // 30% –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
                if (event.getRawY() < widgetHeightThreshold && !this.isLocked) { // –ï—Å–ª–∏ –≤–∏–¥–∂–µ—Ç –±–ª–∏–∑–∫–æ –∫ –≤–µ—Ä—Ö–Ω–µ–º—É –∫—Ä–∞—é –∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                  this.showDeleteArea(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
                } else {
                  this.hideDeleteArea(); // –°–∫—Ä—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
                }
              } catch (e) {
                console.error("Error updating layout:", e);
              }
              return true;

            case android.view.MotionEvent.ACTION_UP:
              const currentTime = new Date().getTime();
              if (currentTime - this.lastTouchTime < 300) { // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫
                this.toggleLock(); // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏
              } else if (event.getRawY() < 200 && !this.isLocked) { // –ï—Å–ª–∏ –æ—Ç–ø—É—Å—Ç–∏–ª–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                this.removeLastFloatingWidget(); // –£–¥–∞–ª—è–µ–º –≤–∏–¥–∂–µ—Ç
              }
              this.lastTouchTime = currentTime; // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞—Å–∞–Ω–∏—è
              this.hideDeleteArea(); // –°–∫—Ä—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
              return true;
          }
          return false;
        }
      }));

      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç
      console.log("Adding widget on top...");
      this.windowManager.addView(floatingView, this.params);
      this.startInactivityTimer(); // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
      this.floatingViews.push(floatingView); // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –≤ –º–∞—Å—Å–∏–≤
      return floatingView; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç
    } catch (error) {
      console.error("Error creating widget:", error);
      return null;
    }
  }

  private createFloatingWidget(): any {
    try {
      const context = Utils.android.getApplicationContext();
      console.log("Getting window manager...");
      this.windowManager = context.getSystemService(android.content.Context.WINDOW_SERVICE);

      const displayMetrics = context.getResources().getDisplayMetrics();
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Ü–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞
      const x = (displayMetrics.widthPixels - this.widgetSize) / 2;
      const y = (displayMetrics.heightPixels - this.widgetSize) / 2;
      
      return this.createWidget(x, y);
    } catch (error) {
      console.error("Error in createFloatingWidget:", error);
      throw error;
    }
  }

  private hideOverlay(): void {
    if (this.overlayView) {
      try {
        // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ
        this.windowManager.removeView(this.overlayView);
        this.overlayView = null;
      } catch (e) {
        console.error('Error removing overlay:', e);
      }
    }
  }

  private startInactivityTimer(): void {
    // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if (this.inactivityTimer) {
      clearTimeout(this.inactivityTimer);
      this.inactivityTimer = null;
    }
    
    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∏–¥–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (this.floatingViews.length > 0) {
      this.inactivityTimer = setTimeout(() => {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        if (this.floatingViews.length > 0) {
          const lastWidget = this.floatingViews[this.floatingViews.length - 1];
          if (lastWidget) {
            lastWidget.setAlpha(0.5); // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
          }
        }
      }, 3000); // 3 —Å–µ–∫—É–Ω–¥—ã
    }
  }

  private resetInactivityTimer(): void {
    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∏–¥–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (this.floatingViews.length > 0) {
      const lastWidget = this.floatingViews[this.floatingViews.length - 1];
      if (lastWidget && this.inactivityTimer) {
        clearTimeout(this.inactivityTimer);
        lastWidget.setAlpha(1); // –í–µ—Ä–Ω—É—Ç—å –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        this.startInactivityTimer(); // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä —Å–Ω–æ–≤–∞
      }
    }
  }

  public removeLastFloatingWidget(): void {
    // console.log("Removing last floating widget");
    if (this.floatingViews.length > 0) {
        const lastWidget = this.floatingViews.pop(); // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–¥–∂–µ—Ç
        if (lastWidget) {
            try {
                this.windowManager.removeView(lastWidget); // –£–¥–∞–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –∏–∑ WindowManager
                this.hasWidget$.next(false); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                console.log("Last widget removed successfully");
            } catch (e) {
                console.error('Error removing last floating widget', e);
            }
        }
    } else {
        console.log("No floating widgets to remove");
    }
  }

  public removeAllFloatingWidgets(): void {
    console.log("Removing all floating widgets");
    while (this.floatingViews.length > 0) {
        this.removeLastFloatingWidget(); // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–¥–∂–µ—Ç, –ø–æ–∫–∞ –Ω–µ –æ—á–∏—Å—Ç–∏–º –º–∞—Å—Å–∏–≤
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤–∏–¥–∂–µ—Ç
  public hasActiveWidget(): boolean {
    return this.floatingViews.length > 0;
  }

  private showDeleteArea(): void {
    if (!this.deleteArea) {
        const context = Utils.android.getApplicationContext();
        this.deleteArea = new android.widget.RelativeLayout(context); // –ò—Å–ø–æ–ª—å–∑—É–µ–º RelativeLayout –¥–ª—è deleteArea
        this.deleteArea.setBackgroundColor(android.graphics.Color.WHITE); // –ë–µ–ª—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è

        // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è
        const params = new android.view.WindowManager.LayoutParams(
            android.view.WindowManager.LayoutParams.MATCH_PARENT,
            100, // –í—ã—Å–æ—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è
            android.os.Build.VERSION.SDK_INT >= 26 
                ? android.view.WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY 
                : android.view.WindowManager.LayoutParams.TYPE_PHONE,
            android.view.WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
            android.graphics.PixelFormat.TRANSLUCENT
        );

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É 80% –æ—Ç —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        const displayMetrics = context.getResources().getDisplayMetrics();
        const screenWidth = displayMetrics.widthPixels;
        params.width = Math.round(screenWidth * 0.6); // 60% —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞
        params.gravity = android.view.Gravity.TOP | android.view.Gravity.CENTER_HORIZONTAL; // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
        params.y = 20; // –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É 10 –ø–∏–∫—Å–µ–ª–µ–π

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å
        this.deleteArea.setElevation(10); // –ü–ª–∞–≤–Ω–∞—è —Ç–µ–Ω—å

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∫—Ä–∞—è
        const shape = new android.graphics.drawable.GradientDrawable();
        shape.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
        shape.setColor(android.graphics.Color.WHITE);
        shape.setCornerRadius(30); // –†–∞–¥–∏—É—Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è
        this.deleteArea.setBackground(shape);

        // –°–æ–∑–¥–∞–µ–º TextView –¥–ª—è —Ç–µ–∫—Å—Ç–∞ "–£–¥–∞–ª–∏—Ç—å –≤–∏–¥–∂–µ—Ç"
        const textView = new android.widget.TextView(context);
        textView.setText("–£–¥–∞–ª–∏—Ç—å –≤–∏–¥–∂–µ—Ç");
        textView.setTextColor(android.graphics.Color.BLACK); // –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        textView.setTextSize(18); // –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
        textView.setGravity(android.view.Gravity.CENTER); // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
        const layoutParams = new android.widget.RelativeLayout.LayoutParams(
            android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT,
            android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT
        );
        layoutParams.addRule(android.widget.RelativeLayout.CENTER_IN_PARENT); // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ RelativeLayout

        // –î–æ–±–∞–≤–ª—è–µ–º TextView –≤ deleteArea
        this.deleteArea.addView(textView, layoutParams); // –î–æ–±–∞–≤–ª—è–µ–º TextView –≤ deleteArea

        // –î–æ–±–∞–≤–ª—è–µ–º deleteArea –≤ WindowManager
        this.windowManager.addView(this.deleteArea, params);
    }
  }

  private hideDeleteArea(): void {
    if (this.deleteArea) {
      try {
        this.windowManager.removeView(this.deleteArea);
        this.deleteArea = null;
      } catch (e) {
        console.error('Error removing delete area:', e);
      }
    }
  }
} 